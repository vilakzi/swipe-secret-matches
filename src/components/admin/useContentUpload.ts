
import { useState, useCallback } from 'react';
import { useAdminContent } from '@/hooks/useAdminContent';

export interface UploadFile {
  file: File;
  preview: string;
  type: 'image' | 'video';
  id: string;
}

// Upload hook for admin ContentUpload
export function useContentUpload() {
  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);
  const [uploading, setUploading] = useState(false);
  const { createContent } = useAdminContent();

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const newFiles = acceptedFiles.map(file => ({
      file,
      preview: URL.createObjectURL(file),
      type: file.type.startsWith('image/') ? 'image' as const : 'video' as const,
      id: Math.random().toString(36).substr(2, 9),
    }));
    setUploadFiles(prev => [...prev, ...newFiles]);
  }, []);

  const removeFile = (id: string) => {
    setUploadFiles(prev => {
      const file = prev.find(f => f.id === id);
      if (file) {
        URL.revokeObjectURL(file.preview);
      }
      return prev.filter(f => f.id !== id);
    });
  };

  const uploadSingleFile = async (uploadFile: UploadFile) => {
    const fileUrl = uploadFile.preview; // Should be replaced by actual storage
    await createContent({
      title: uploadFile.file.name,
      content_type: uploadFile.type,
      file_url: fileUrl,
      thumbnail_url: uploadFile.type === 'image' ? fileUrl : undefined,
      file_size: uploadFile.file.size,
      status: 'published',
      visibility: 'public',
      published_at: new Date().toISOString(),
      metadata: {
        originalName: uploadFile.file.name,
        uploadedAt: new Date().toISOString(),
        autoGenerated: true,
      },
    });
  };

  const handleBulkUpload = async () => {
    setUploading(true);
    try {
      for (const uploadFile of uploadFiles) {
        await uploadSingleFile(uploadFile);
      }
      uploadFiles.forEach(file => URL.revokeObjectURL(file.preview));
      setUploadFiles([]);
    } catch (error) {
      console.error('Bulk upload failed:', error);
    } finally {
      setUploading(false);
    }
  };

  return {
    uploadFiles,
    uploading,
    onDrop,
    removeFile,
    handleBulkUpload,
  };
}
